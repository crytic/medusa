package types

import (
	"fmt"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
)

// Block represents a rudimentary block structure generated by sending messages to a test chain.
type Block struct {
	// hash represents the block hash for this block.
	hash common.Hash

	// header represents the block header for this current block.
	header *types.Header

	// messages represent internal EVM core.Message objects. Messages are derived from transactions after validation
	// of a transaction occurs and can be thought of as an internal EVM transaction. It contains typical transaction
	// fields plainly (e.g., no transaction signature is included, the sender is derived and simply supplied as a field
	// in a message).
	messages []*CallMessage

	// receipts represents a transaction receipts received when the associated messages in this structure were sent to
	// the VM to perform a state update. It houses event logs and other information collected during the state
	// transitions when the messages were applied.
	receipts types.Receipts

	// messageResults represents the results of executing a CallMessage, as defined by the chain.TestChain executing it.
	messageResults []*CallMessageResults
}

// NewBlock returns a new Block with the provided parameters.
func NewBlock(blockHash common.Hash, header *types.Header, messages []*CallMessage, receipts types.Receipts, messageResults []*CallMessageResults) (*Block, error) {
	// Verify our message count is valid
	if len(messages) != len(receipts) {
		return nil, fmt.Errorf("cannot created block with %d messages and %d receipts. one receipt should exist per message", len(messages), len(receipts))
	}

	// Create our block and return it
	block := &Block{
		hash:           blockHash,
		header:         header,
		messages:       messages,
		receipts:       receipts,
		messageResults: messageResults,
	}
	return block, nil
}

// Hash provides a block hash for the current block.
func (b *Block) Hash() common.Hash {
	return b.hash
}

// Header provides a block hash for the current block.
func (b *Block) Header() *types.Header {
	return b.header
}

// Messages provides the messages (internal transactions) housed in the current block.
func (b *Block) Messages() []*CallMessage {
	return b.messages
}

// Receipts provides the transaction receipts generated when executing each of the Messages. To determine which message
// generated a receipt, the same index should be used into Messages as Receipts, as they are one-to-one.
func (b *Block) Receipts() types.Receipts {
	return b.receipts
}

// MessageResults provides execution results tracked by the chain.TestChain after processing each message in Messages.
func (b *Block) MessageResults() []*CallMessageResults {
	return b.messageResults
}
