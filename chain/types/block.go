package types

import (
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/types"
)

// Block represents a rudimentary block structure generated by sending messages to a test chain.
type Block struct {
	// Hash represents the block hash for this block.
	Hash common.Hash

	// Header represents the block header for this current block.
	Header *types.Header

	// Messages represent internal EVM core.Message objects. Messages are derived from transactions after validation
	// of a transaction occurs and can be thought of as an internal EVM transaction. It contains typical transaction
	// fields plainly (e.g., no transaction signature is included, the sender is derived and simply supplied as a field
	// in a message).
	Messages []*core.Message

	// MessageResults represents the results recorded while executing transactions.
	MessageResults []*MessageResults

	// BaseVMContext stores the base block VM context before the execution of any transactions
	// within the block. Since transactions that use cheatcodes can affect the VM context
	// permanently, we need to store the original values so that we can maintain execution
	// semantics and allow for the chain to be clone-able.
	BaseVMContext *BaseBlockContext
}

// NewBlock returns a new Block with the provided parameters.
func NewBlock(header *types.Header) *Block {
	// Create our block and return it
	block := &Block{
		Hash:           header.Hash(),
		Header:         header,
		Messages:       make([]*core.Message, 0),
		MessageResults: make([]*MessageResults, 0),
		BaseVMContext: NewBaseBlockContext(
			header.Number,
			header.Time,
			header.BaseFee,
			header.Coinbase,
			header.Difficulty,
			&header.MixDigest,
		),
	}
	return block
}

// BaseNumber returns the base number of the block when the block was first created.
func (b *Block) BaseNumber() *big.Int {
	return b.BaseVMContext.number
}

// BaseTime returns the base time of the block when the block was first created.
func (b *Block) BaseTime() uint64 {
	return b.BaseVMContext.time
}

// BaseBaseFee returns the base fee of the block when the block was first created.
func (b *Block) BaseBaseFee() *big.Int {
	return b.BaseVMContext.baseFee
}

// BaseCoinbase returns the coinbase of the block when the block was first created.
func (b *Block) BaseCoinbase() common.Address {
	return b.BaseVMContext.coinbase
}

// BaseDifficulty returns the difficulty of the block when the block was first created.
func (b *Block) BaseDifficulty() *big.Int {
	return b.BaseVMContext.difficulty
}

// BaseRandom returns the random value of the block when the block was first created.
func (b *Block) BaseRandom() *common.Hash {
	return b.BaseVMContext.random
}
