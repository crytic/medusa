#!/usr/bin/env bash

# Display the banner
function print_banner {
  printf "

=========================================================================================

  __  __          _
 |  \/  |        | |        ____
 | \  / | ___  __| | _   _ / ___/  ____   
 | |\/| |/ _ \/ _  || | | |\___ \ /    |
 | |  | |  __/ (_| || |_| | ___) || () |     
 |_|  |_|\___|\____| \___/ |____/ |_/|_|

 
      Parallelized, coverage-guided, mutational Solidity smart contract fuzzing.


==========================================================================================

Repo       : https://github.com/crytic/medusa/
License    : AGPL-3.0
Latest     : $(curl --silent "https://api.github.com/repos/crytic/medusa/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
Support    : https://github.com/crytic/medusa/issues
Contribute : https://github.com/crytic/medusa/contribute

==========================================================================================

"
}

# Display usage information
function show_usage {
  cat 1>&2 <<EOF
The installer for Medusa.

Easily update or install a specific version of Medusa.

USAGE:
    medusaget <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
    -b, --branch    Install a specific branch
    -P, --pr        Install a specific pull request
    -c, --commit    Install a specific commit
    -r, --repo      Install a remote repository
    -p, --path      Install a local repository
EOF
}

# Log messages
function log {
  echo "INFO: $1"
}

# Log error and exit
function error {
  echo "ERROR: $1"
  exit 1
}

# Check for required dependencies 
function validate_deps {
  local deps=("go" "git" "pip3" "curl")
  for cmd in "${deps[@]}"; do
    if ! command -v $cmd &>/dev/null; then
      error "Missing $cmd. Exiting."
    fi
  done
}

# Get the go version
function get_go_version {
  go version | cut -d ' ' -f3 | tr -d 'go'
}

# Check that the go version is supported by medusa
function validate_go_version {
  local min="1.18"
  local ver=$(get_go_version)
  if [[ $ver < $min ]]; then
    error "Go $min+ required. Exiting."
  fi
}

# Install crytic compile if it isn't available
function install_crytic_compile {
  if ! pip3 show crytic-compile &> /dev/null; then
    pip3 install crytic-compile
  fi
}

# Check for a valid solidity compiler
function validate_solidity_compiler {
  local solc=("solc" "hardhat" "truffle" "brownie" "foundry")
  for cmd in "${solc[@]}"; do
    if command -v $cmd &>/dev/null; then
      return 0
    fi
  done
  error "No Solidity compiler found. Exiting."
}

# Verify platform and architecture
function check_platform_and_arch {
  local platform=$(uname -s)
  local architecture=$(uname -m)

  case $platform in
    Linux) platform="linux" ;;
    Darwin) platform="mac" ;;
    MINGW*) platform="win" ;;
    *) error "Unsupported platform"; ;;
  esac

  case $architecture in
    x86_64) architecture="x64" ;;
    arm64) architecture="arm64" ;;
    *) error "Unsupported architecture: $architecture"; ;;
  esac
}

function main {
  # Parse command-line arguments
  while (( "$#" )); do
    case "$1" in
      -v|--version) version="$2"; shift ;;
      -b|--branch)  branch="$2";  shift ;;
      -P|--pr)      pr="$2";      shift ;;
      -c|--commit)  commit="$2";  shift ;;
      -r|--repo)    repo="$2";    shift ;;
      -p|--path)    path="$2";    shift ;;
      --help|-h)
        show_usage
        exit 0
        ;;
      *) error "Unknown option: $1. Exiting." ;;
    esac
    shift
  done

  # Check for conflicting options
  if [ -n "$pr" ] && [ -n "$branch" ]; then
    error "Cannot specify both --pr and --branch. Exiting."
  fi

  # Pre-requisites
  check_platform_and_arch
  validate_deps
  validate_solidity_compiler
  print_banner

  # Setup base directories
  base_dir="${XDG_CONFIG_HOME:-$HOME}"
  bin_dir="$base_dir/.medusa/bin"
  mkdir -p "$bin_dir"

  # Handle local installation if provided
  if [ "$path" != "" ]; then
    log "Installing from local repository: $path"

    cd "$path"
    go build -v -o "$bin_dir/medusa"
    log "medusa installed."
    exit 0
  fi

  # Clone medusa repo if it doesn't exist
  repo="https://github.com/crytic/medusa.git"
  clone_dir="$base_dir/src/medusa"

  if [ ! -d "$clone_dir" ]; then
    git clone "$repo" "$clone_dir"
  fi

  # Navigate to the medusa repo and fetch updates
  cd "$clone_dir"
  git fetch origin

  # Save the current active branch
  active_branch=$(git symbolic-ref HEAD 2>/dev/null | cut -d'/' -f 3)

  # Determine target branch or state based on user options
  target=""
  [ -n "$branch" ] && target=$branch
  [ -n "$pr" ] && target="pr$pr"

  # Pre-fetch the target, but don't checkout
  if [ -n "$branch" ]; then
    git fetch origin "$branch"
  elif [ -n "$pr" ]; then
    git fetch origin pull/$pr/head:pr$pr
  fi

  # Save list of old branches and remove them
  old_branches=$(git for-each-ref --format '%(refname:short)' refs/heads/)
  for old in $old_branches; do
    [ "$old" != "master" ] && git branch -D $old
  done

  # If the active branch is not the one you're about to install, switch to master
  [ "$active_branch" != "$target" ] && git checkout master

  # Now checkout to the target
  if [ -n "$branch" ]; then
    git checkout -b "$branch" --track "origin/$branch"
  elif [ -n "$pr" ]; then
    git checkout pr$pr
  elif [ -n "$commit" ]; then
    git checkout "$commit"
  elif [ -n "$version" ]; then
    git checkout "tags/$version"
  fi

  # Append to PATH if not already there
  add_to_path="export PATH=\$PATH:$bin_dir"
  case "$SHELL" in
    */zsh)
      grep -qF "$add_to_path" ~/.zshrc || echo "$add_to_path" >> ~/.zshrc
      ;;
    */bash)
      grep -qF "$add_to_path" ~/.bashrc || echo "$add_to_path" >> ~/.bashrc
      ;;
    *)
     error "Unknown shell. Manually add to PATH."
     ;;
  esac

  go build -v -o "$bin_dir/medusa"

  log "medusa installed."
}

main "$@"

