#!/usr/bin/env bash
set -e

BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
MEDUSA_DIR=${MEDUSA_DIR:-"$BASE_DIR/.medusa"}
MEDUSA_BIN_DIR="$MEDUSA_DIR/bin"

need_cmd() {
  if ! command -v "$1" &>/dev/null; then
    echo "need '$1' (command not found)"
    exit 1
  fi
}

say() {
  printf "medusaget: %s\n" "$1"
}

# Check for prerequisites
need_cmd go
need_cmd curl
need_cmd pip3

# Check Go version
GO_VERSION=$(go version | awk '{print $3}' | tr -d 'go')
if [[ $(echo "$GO_VERSION 1.18" | awk '{print ($1 >= $2)}') -ne 1 ]]; then
    echo "Go version 1.18 or higher is required. Exiting."
    exit 1
fi

# Install crytic-compile if not installed
if ! pip3 show crytic-compile &> /dev/null; then
    say "Installing crytic-compile"
    pip3 install crytic-compile
fi

# Check for solc or hardhat
if ! command -v solc &> /dev/null && ! command -v hardhat &> /dev/null; then
    echo "Either solc or hardhat is required but neither is installed. Exiting."
    exit 1
fi

# Create directories if they don't exist
mkdir -p $MEDUSA_BIN_DIR

# Determine platform and architecture
PLATFORM="$(uname -s)"
ARCHITECTURE="$(uname -m)"
EXT="tar.gz"

case $PLATFORM in
  Linux)
    PLATFORM="linux"
    ;;
  Darwin)
    PLATFORM="mac"
    if [ "$ARCHITECTURE" = "arm64" ]; then
      ARCHITECTURE="arm64"
    else
      ARCHITECTURE="x64"
    fi
    ;;
  MINGW*)
    EXT="tar.gz"
    PLATFORM="win"
    ;;
  *)
    echo "unsupported platform: $PLATFORM"
    exit 1
    ;;
esac

if [ "$ARCHITECTURE" = "x86_64" ]; then
  ARCHITECTURE="x64"
elif [ "$ARCHITECTURE" = "arm64" ]; then
  ARCHITECTURE="arm64"
else
  echo "unsupported architecture: $ARCHITECTURE"
  exit 1
fi

get_latest_version() {
  LATEST_VERSION=$(curl --silent "https://api.github.com/repos/crytic/medusa/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  if [[ -z "$LATEST_VERSION" ]]; then
    echo "Couldn't get the latest version. Exiting."
    exit 1
  fi
}

# Compute the URL of the release tarball in the Medusa repository.
get_latest_version
BIN_URL="https://github.com/crytic/medusa/releases/download/$LATEST_VERSION/medusa-$PLATFORM-$ARCHITECTURE.$EXT"

# Download and extract Medusa
say "Downloading Medusa..."
TMP_FILE=$(mktemp)
curl -L $BIN_URL -o $TMP_FILE
FILE_TYPE=$(file -b $TMP_FILE)

if [[ $FILE_TYPE != "gzip compressed data"* ]]; then
  echo "Downloaded file is not a gzip compressed archive. Exiting."
  exit 1
fi

tar -xzvf $TMP_FILE -C $MEDUSA_BIN_DIR
rm -f $TMP_FILE

PROFILE="$HOME/.bashrc"  # Default to bash
case $SHELL in
  */zsh)
    PROFILE="$HOME/.zshrc"
    ;;
  */bash)
    PROFILE="$HOME/.bashrc"
    ;;
  */fish)
    PROFILE="$HOME/.config/fish/config.fish"
    ;;
esac

# Add Medusa to PATH if not already present
if [[ ":$PATH:" != *":${MEDUSA_BIN_DIR}:"* ]]; then
    echo "export PATH=\"\$PATH:$MEDUSA_BIN_DIR\"" >> $PROFILE
fi

say "Medusa installed. Run 'source $PROFILE' or start a new terminal session to use it."
