#!/usr/bin/env bash
set -e # Exit on error

banner() {
  printf "

=========================================================================================

  __  __          _
 |  \/  |        | |        ____
 | \  / | ___  __| | _   _ / ___/  ____   
 | |\/| |/ _ \/ _  || | | |\___ \ /    |
 | |  | |  __/ (_| || |_| | ___) || () |     
 |_|  |_|\___|\____| \___/ |____/ |_/|_|

 
      Parallelized, coverage-guided, mutational Solidity smart contract fuzzing.


==========================================================================================

Repo       : https://github.com/crytic/medusa/
License    : AGPL-3.0
Latest     : $(curl --silent "https://api.github.com/repos/crytic/medusa/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
Support    : https://github.com/crytic/medusa/issues
Contribute : https://github.com/crytic/medusa/contribute

==========================================================================================

"
}

# --help output
usage() {
  cat 1>&2 <<EOF
The installer for Medusa.

Easily update or install a specific version of Medusa.

USAGE:
    medusaget <OPTIONS>

OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
EOF
}

# Log messages
say() {
  echo "medusaget: $1"
}

# Check if command exists
need_cmd() {
  if check_cmd "$1"; then
    say "need '$1' (command not found)"
    exit 1
  fi
}

# Helper function to check command
check_cmd() {
  ! command -v "$1" &>/dev/null
}

# Check Go version
check_go_version() {
  local version=$(go version | awk '{print $3}' | tr -d 'go')
  [[ $(echo "$version 1.18" | awk '{print ($1 >= $2)}') -eq 1 ]]
}

main() {
  BASE_DIR=${XDG_CONFIG_HOME:-$HOME}
  MEDUSA_DIR="$BASE_DIR/.medusa"
  MEDUSA_BIN_DIR="$MEDUSA_DIR/bin"

  need_cmd go
  need_cmd git
  need_cmd pip3

  while [[ $1 ]]; do
    case $1 in
      --version=*|-v=*)
        MEDUSA_VERSION="${1#*=}"
        ;;
      --branch=*|-b=*)
        MEDUSA_BRANCH="${1#*=}"
        ;;
      *)
        say "unknown option: $1"
        exit 1
        ;;
    esac
    shift
  done

  banner

  if ! check_go_version; then
    say "Go version 1.18 or higher is required. Exiting."
    exit 1
  fi

  if ! pip3 show crytic-compile &> /dev/null; then
    say "Installing crytic-compile"
    pip3 install crytic-compile
  fi

  if check_cmd solc && check_cmd hardhat && check_cmd truffle && check_cmd brownie && check_cmd foundry; then
    say "No Solidity compiler found. Exiting."
    exit 1
  fi

  mkdir -p "$MEDUSA_BIN_DIR"

  PLATFORM=$(uname -s)
  ARCHITECTURE=$(uname -m)

  case $PLATFORM in
    Linux) PLATFORM="linux" ;;
    Darwin) PLATFORM="mac" ;;
    MINGW*) PLATFORM="win" ;;
    *) say "Unsupported platform"; e 1 ;;
  esac

  case $ARCHITECTURE in
    x86_64) ARCHITECTURE="x64" ;;
    arm64) ARCHITECTURE="arm64" ;;
    *) say "Unsupported architecture: $ARCHITECTURE"; exit 1 ;;
  esac

  MEDUSA_REPO="https://github.com/crytic/medusa.git"
  CLONE_DIR="$MEDUSA_DIR/src"

  if [ ! -d "$CLONE_DIR" ]; then
    git clone "$MEDUSA_REPO" "$CLONE_DIR"
  fi

  cd "$CLONE_DIR"
  git fetch origin

  if [ -n "$MEDUSA_BRANCH" ]; then
    git checkout "$MEDUSA_BRANCH"
  elif [ -n "$MEDUSA_VERSION" ]; then
    git checkout "tags/$MEDUSA_VERSION"
  else
    git checkout master
  fi

  go build -v -o "$MEDUSA_BIN_DIR/medusa"

  say "medusa installed. Add $MEDUSA_BIN_DIR to your PATH."
}

main "$@" || exit 1
